diff --git a/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js b/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
index 441442f..608cc00 100644
--- a/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
+++ b/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
@@ -733,6 +733,34 @@ var ExhaustiveDeps = {
         additionalHooks: {
           type: 'string'
         },
+        disabledHooks: {
+          type: 'array',
+          items: {
+            type: 'string',
+          },
+        },
+        staticHooks: {
+          type: 'object',
+          additionalProperties: {
+            oneOf: [
+              {
+                type: 'boolean',
+              },
+              {
+                type: 'array',
+                items: {
+                  type: 'boolean',
+                },
+              },
+              {
+                type: 'object',
+                additionalProperties: {
+                  type: 'boolean',
+                },
+              },
+            ],
+          },
+        },
         enableDangerousAutofixThisMayCauseInfiniteLoops: {
           type: 'boolean'
         }
@@ -743,8 +771,12 @@ var ExhaustiveDeps = {
     // Parse the `additionalHooks` regex.
     var additionalHooks = context.options && context.options[0] && context.options[0].additionalHooks ? new RegExp(context.options[0].additionalHooks) : undefined;
     var enableDangerousAutofixThisMayCauseInfiniteLoops = context.options && context.options[0] && context.options[0].enableDangerousAutofixThisMayCauseInfiniteLoops || false;
+    var disabledHooks = (context.options && context.options[0] && context.options[0].disabledHooks) || [];
+    var staticHooks = (context.options && context.options[0] && context.options[0].staticHooks) || {};
     var options = {
       additionalHooks: additionalHooks,
+      disabledHooks: disabledHooks,
+      staticHooks: staticHooks,
       enableDangerousAutofixThisMayCauseInfiniteLoops: enableDangerousAutofixThisMayCauseInfiniteLoops
     };
 
@@ -954,6 +986,33 @@ var ExhaustiveDeps = {
               return true;
             }
           }
+        } else if (options.staticHooks[name]) {
+          const staticParts = options.staticHooks[name];
+          if (staticParts === true) {
+            // entire return value is static
+            return true;
+          } else if (Array.isArray(staticParts)) {
+            // destructured tuple return where some elements are static
+            if (
+              id.type === 'ArrayPattern' &&
+              id.elements.length <= staticParts.length &&
+              Array.isArray(resolved.identifiers)
+            ) {
+              // find index of the resolved ident in the array pattern
+              const idx = id.elements.findIndex(
+                ident => ident === resolved.identifiers[0],
+              );
+              if (idx >= 0) {
+                return staticParts[idx];
+              }
+            }
+          } else if (typeof staticParts === 'object' && id.type === 'ObjectPattern') {
+            // destructured object return where some properties are static
+            const property = id.properties.find(p => p.key === resolved.identifiers[0])
+            if (property) {
+              return staticParts[property.key.name]
+            }
+          }
         } // By default assume it's dynamic.
 
 
@@ -2312,6 +2371,12 @@ function getNodeWithoutReactNamespace(node, options) {
 // 1 for useImperativeHandle(ref, fn).
 // For additionally configured Hooks, assume that they're like useEffect (0).
 
+var basicHooks = [
+  'useEffect',
+  'useLayoutEffect',
+  'useCallback',
+  'useMemo',
+];
 
 function getReactiveHookCallbackIndex(calleeNode, options) {
   var node = getNodeWithoutReactNamespace(calleeNode);
@@ -2320,14 +2385,13 @@ function getReactiveHookCallbackIndex(calleeNode, options) {
     return -1;
   }
 
-  switch (node.name) {
-    case 'useEffect':
-    case 'useLayoutEffect':
-    case 'useCallback':
-    case 'useMemo':
-      // useEffect(fn)
-      return 0;
+  if (basicHooks.includes(node.name)) {
+    // useEffect(fn)
+    var disabledHooks = options && options.disabledHooks;
+    return disabledHooks && disabledHooks.includes(node.name) ? -1 : 0;
+  }
 
+  switch (node.name) {
     case 'useImperativeHandle':
       // useImperativeHandle(ref, fn)
       return 1;
